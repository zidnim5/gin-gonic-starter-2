// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/todo/todo_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTodoRepo is a mock of TodoRepo interface
type MockTodoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepoMockRecorder
}

// MockTodoRepoMockRecorder is the mock recorder for MockTodoRepo
type MockTodoRepoMockRecorder struct {
	mock *MockTodoRepo
}

// NewMockTodoRepo creates a new mock instance
func NewMockTodoRepo(ctrl *gomock.Controller) *MockTodoRepo {
	mock := &MockTodoRepo{ctrl: ctrl}
	mock.recorder = &MockTodoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoRepo) EXPECT() *MockTodoRepoMockRecorder {
	return m.recorder
}

// FindId mocks base method
func (m *MockTodoRepo) FindId(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindId", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindId indicates an expected call of FindId
func (mr *MockTodoRepoMockRecorder) FindId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindId", reflect.TypeOf((*MockTodoRepo)(nil).FindId), id)
}

// Insert mocks base method
func (m *MockTodoRepo) Insert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockTodoRepoMockRecorder) Insert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTodoRepo)(nil).Insert))
}
